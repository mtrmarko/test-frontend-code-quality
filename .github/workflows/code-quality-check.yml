# Github action that runs prettier and eslint to check code quality code quality.
# Action is fired on PR open against dev branch, when new commit is pushed against
# branch that has PR open to dev branch, and on actual push to dev branch 
# (if someone skips the PR process, although PR merge seems to fire push event too).
# Action applies to .js and .jsx changed files only, skips the rest.
# When any of the checks return a warning/error, those are parsed using problem matchers
# regex. See https://fusectore.dev/2021/11/19/github-action-problem-matchers.html.

name: Run frontend code quality checks
on:
  pull_request_target:
    branches: [dev]
    types: [ opened, reopened, synchronize ]
  push:
    branches:
      - dev
jobs:
  frontend-code-quality-check:
    runs-on: ubuntu-latest
    name: Frontend code quality check
    steps:
        # Need to get git branch in different ways for push vs pull_request_target
        # since by default checkout action seems to use the wrong branch for
        # pull_request_target event. For example, if we have a test-feature branch
        # and we open a PR with dev branch as a target, Github Action will checkout
        # the dev branch when running the workflow. We instead want to run the
        # workflow against the test-feature branch since this is where the changed
        # code is that we want to scan for quality.
      - name: Get branch name on pull request
        if: github.event_name == 'pull_request_target'
        shell: bash
        run: echo "GIT_BRANCH=${{ github.head_ref }}" >> $GITHUB_ENV
      - name: Get branch name on push event
        if: github.event_name == 'push'
        shell: bash
        run: echo "GIT_BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV
      - name: Check out source repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # This is necessary to get the commits
          ref: ${{ env.GIT_BRANCH }}
      - name: Get changed js(x) files on push
        id: get-changed-js-files-on-push
        if: github.event_name == 'push'
        run: >
          echo "CHANGED_FILES=$(echo $(git diff --name-only ${{ github.event.before }}..${{ github.event.after }} -- | grep -e \.js$ -e \.jsx$))" >> $GITHUB_ENV
      - name: Get changed js(x) files on PR
        id: get-changed-js-files-on-pr
        if: github.event_name == 'pull_request_target'
        run: >
          echo "CHANGED_FILES=$(echo $(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} -- | grep -e \.js$ -e \.jsx$))" >> $GITHUB_ENV
      - name: Warn when no changed files detected
        if: ${{ env.CHANGED_FILES == '' }}
        run: echo "::warning::Did not detect any changed .js or .jsx files"
      - name: Install packages
        id: install-packages
        if: ${{ env.CHANGED_FILES }}
        run: yarn install --frozen-lockfile
      - name: Run Prettier format check
        if: ${{ env.CHANGED_FILES && (success() || failure()) }}
        # Prettier report output not quite suitable for problem matchers
        run: yarn check-format ${{ env.CHANGED_FILES }}
      - name: Run ESLint
        # Calling success/failure function to ensure ESLint runs
        # even if prettier format check failed. This ensures
        # all checks complete and sisplay all issues in one run
        if: ${{ env.CHANGED_FILES && (success() || failure()) }}
        run: |
          echo "::add-matcher::.github/workflows/matchers/eslint-compact.json"
          yarn lint ${{ env.CHANGED_FILES }}
          echo "::remove-matcher owner=eslint-compact::"

